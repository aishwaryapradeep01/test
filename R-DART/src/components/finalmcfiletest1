// import axios from 'axios';
// import { Button,TextInput, Form, FileUploader } from 'carbon-components-react';

// import React, { useState} from 'react';

// function Filetest({setuLabelInput, setufilepath, setufilename, ulabelerr}) {

//     const [selectedFile, setselectedFile] = useState({});
//     const [loaded, setloaded] = useState(1);
//     const [label , setlabel] = useState('');
    

//     const onLabelSubmit = (e) => {

//       setlabel(e.target.value)
//       setuLabelInput(e.target.value)
      
//     }

//     const onChangeHandler = (event) => {

//         setselectedFile(event.target.files[0]);
//         setloaded(0);
//         }

//   const onClickHandler = () => {
//    const data = new FormData()
//    data.append('file', selectedFile)
//    axios.post("http://localhost:8000/upload", data, { 
//   })
//   .then(res => { 
//     console.log(res.statusText)

    // if(res.statusText === "OK" && loaded === 0){
    //   alert("File Upload Successful");
    //   setufilepath('/Users/aishwaryapradeep/Desktop/Project-SAppGen/R-DART/datafolder/data.csv');
    //   setufilename('data.csv');
    // }
    // else{
    //   alert("File not uploaded");
    // }
//  })
      
// }


	
// 	return (

//     <div className="bx--file__container">
//         <FileUploader accept={['.csv']}
//           buttonKind="primary"
//           buttonLabel="Choose File"
//           filenameStatus="edit"
//           iconDescription="Clear file"
//           labelDescription="only .csv files at 1mb or less"
//           labelTitle="Choose File"
//           onChange={onChangeHandler}
          
//         />
      
//       <Button type="submit" onClick= {onClickHandler} > Upload </Button>

//       <br/>
//       <br/>
//       <br/>
//       <br/>
//       <br/>

//       <TextInput id={'label'} labelText = {'Label'} invalidText="Enter Label Column" invalid = {ulabelerr} placeholder = {'Label'} value={label} onChange={onLabelSubmit} />
//             <br/>
//             <br/>
//             <br/>
//             <br/>
//             <br/>
//             <br/>
//       </div>

// 		// <div>
// 		// 	<input type="file" name="file" onChange={onChangeHandler}/>
// 		// 	<button type="button" class="btn btn-success btn-block" onClick={onClickHandler}>Upload</button>
// 		// </div>
// 	);
	
// }

// export default Filetest;
import axios from 'axios';
import { Button,TextInput, Form, FileUploader } from 'carbon-components-react';
import {
  FileUploaderItem,
  FileUploaderDropContainer,
  FormItem,
} from 'carbon-components-react';
import React, { useState, useCallback, useEffect} from 'react';

let lastId = 0;
function uid(prefix = 'id') {
  lastId++;
  return `${prefix}${lastId}`;
}

function Filetest1({setufilepath, setufilename}) {

    const [selectedFile, setselectedFile] = useState({});
    const [loaded, setloaded] = useState(1);
    const [uploadbuttonstate1, setuploadbuttonstate1] = useState(false);

    const onChangeHandler = (event) => {

   setselectedFile(event.target.files[0]);
   setloaded(0);
  }

  const onClickHandler = () => {

   const data = new FormData()
   data.append('file', selectedFile)
   axios.post("http://localhost:8000/upload", data, { 
  })
  .then(res => {
    console.log(res)
    //alert(res);
   if(res.statusText === "OK" && loaded === 0){
      alert("File Upload Successful");
      setufilepath('/Users/aishwaryapradeep/Desktop/Project-SAppGen/R-DART/datafolder/data.csv');
      setufilename('data.csv');
    }
    // else if(res.status === 500){
    //   alert("File larger than 3MB");
    //   console.log("500 err : file larger than 3 mb");
    // }
    // else{
    //   alert("File not uploaded");
    // }

 })
}

  const [files, setFiles] = useState([]);

    const handleDrop = (e) => {
    e.preventDefault();
     e.stopPropagation();
     console.log(e);
  };

  const handleDragover = (e) => {
    e.preventDefault();
     e.stopPropagation();
     console.log(e);
     
  };
	  useEffect(() => {
    document.addEventListener('drop', handleDrop);
    document.addEventListener('dragover', handleDragover);
    return () => {
      document.removeEventListener('drop', handleDrop);
      document.removeEventListener('dragover', handleDragover);
      
    };
  }, []);

    const uploadFile = async (fileToUpload) => {
    // file size validation
    if (fileToUpload.filesize > 3145728) {
      const updatedFile = {
        ...fileToUpload,
        status: 'edit',
        iconDescription: 'Delete file',
        invalid: true,
        errorSubject: 'File size exceeds limit',
        errorBody: '3MB max file size. Select a new file and try again.',
      };
      setuploadbuttonstate1(true);
      setFiles((files) =>
        files.map((file) =>
          file.uuid === fileToUpload.uuid ? updatedFile : file
        )
      );
      return;
    }
    else{
      setuploadbuttonstate1(false);
    }
    // file type validation
    if (fileToUpload.invalidFileType) {
      const updatedFile = {
        ...fileToUpload,
        status: 'edit',
        iconDescription: 'Delete file',
        invalid: true,
        errorSubject: 'Invalid file type',
        errorBody: `"${fileToUpload.name}" does not have a valid file type.`,
      };
      setFiles((files) =>
        files.map((file) =>
          file.uuid === fileToUpload.uuid ? updatedFile : file
        )
      );
      return;
    }
    try {
      const response = await fetch(
        'https://www.mocky.io/v2/5185415ba171ea3a00704eed?mocky-delay=1000ms',
        {
          method: 'POST',
          mode: 'cors',
          body: fileToUpload,
        }
      );
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const updatedFile = {
        ...fileToUpload,
        status: 'complete',
        iconDescription: 'Upload complete',
      };
      setFiles((files) =>
        files.map((file) =>
          file.uuid === fileToUpload.uuid ? updatedFile : file
        )
      );

      // show x icon after 1 second
      setTimeout(() => {
        const updatedFile = {
          ...fileToUpload,
          status: 'edit',
          iconDescription: 'Remove file',
        };
        setFiles((files) =>
          files.map((file) =>
            file.uuid === fileToUpload.uuid ? updatedFile : file
          )
        );
      }, 1000);
    } catch (error) {
      const updatedFile = {
        ...fileToUpload,
        status: 'edit',
        iconDescription: 'Upload failed',
        invalid: true,
      };
      setFiles((files) =>
        files.map((file) =>
          file.uuid === fileToUpload.uuid ? updatedFile : file
        )
      );
      console.log(error);
    }
  };
  const onAddFiles = useCallback((evt, { addedFiles }) => {
    evt.stopPropagation();
    const newFiles = addedFiles.map((file) => ({
        uuid: uid(),
        name: file.name,
        filesize: file.size,
        status: 'uploading',
        iconDescription: 'Uploading',
      }));
    //console.log("addedFiles[0]")
      if (addedFiles[0]) {
        console.log("addedFiles[0]:", addedFiles[0]);
        setFiles([newFiles[0]]);
        uploadFile(newFiles[0]);
        setselectedFile(addedFiles[0]);
        }
      // else{
      //   console.log("No file uploaded");
      // }
    }
  );

  const handleFileUploaderItemClick = useCallback(
    (_, { uuid: clickedUuid }) =>
      setFiles(files.filter(({ uuid }) => clickedUuid !== uuid)),
    [files]
  );


	return (

    <div className="bx--file__container">
        <FileUploaderDropContainer
        // name="productLogo"
        labelText="Drag and drop here or click to upload"
        onAddFiles={onAddFiles}
        accept={['.csv']}
         />

       {/* <FileUploaderDropContainer accept={['.csv']} onAddFiles={onAddFiles} /> */}
      <div className="uploaded-files" style={{ width: '100%' }}>
        {files.map(
          ({
            uuid,
            name,
            filesize,
            status,
            iconDescription,
            invalid,
            ...rest
          }) => (
            <FileUploaderItem
              key={uid()}
              uuid={uuid}
              name={name}
              filesize={filesize}
              size="lg"
              status={status}
              iconDescription={iconDescription}
              invalid={invalid}
              onDelete={handleFileUploaderItemClick}
              {...rest}
            />
          )
        )}
      </div>
    
      <div className="ButtonArea">
         <Button type="submit" disabled = {uploadbuttonstate1} onClick= {onClickHandler} >Upload </Button>
      </div>


      </div>

	);
	
}

export default Filetest1;