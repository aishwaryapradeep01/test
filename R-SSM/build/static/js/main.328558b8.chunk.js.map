{"version":3,"sources":["components/ssmmain.js","App.js","index.js"],"names":["SSMMain","useState","gname","setgname","fname","setfname","email","setemail","inviteid","setinviteid","custobj","setCustobj","subsobj","setSubsobj","isLoading","setLoading","showForm","setShowForm","notifystatus","setnotifystatus","notifystatus2","setnotifystatus2","notifystatus3","setnotifystatus3","err1status","seterr1status","err2status","seterr2status","err3status","seterr3status","errstate1","seterrstate1","errtext1","seterrtext1","errstate2","seterrstate2","errtext2","seterrtext2","erremstate","seterremstate","erremtext","seterremtext","buttonstate","setbuttonstate","Form","onSubmit","e","preventDefault","a","process","REACT_APP_mode","console","log","headers","REACT_APP_CLIENT_ID","REACT_APP_CLIENT_SECRET","fetch","REACT_APP_USERNAME","response","json","result","cust_id","JSON","parse","getSubscrpts","className","Button","type","Loading","active","description","withOverlay","iconDescription","subtitle","timeout","onClose","kind","title","List","DataTable","rows","key","header","getHeaderProps","TableContainer","Table","TableHead","TableRow","map","TableHeader","TableBody","row","index","TableCell","PartNumber","Name","NumberOfAvailableSeats","SubscriptionState","Link","onClick","id","Id","getSubs","SeatSet","SubscriberId","Person","OrgName","GivenName","SubscriberState","subid","seatid","method","setTimeout","revokeSubs","reqbody","body","stringify","inviteUser","TextInput","invalid","invalidText","labelText","placeholder","size","value","onChange","target","match","disabled","App","prefix","href","Style","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.328558b8.chunk.js","sourcesContent":["import React, { useState} from 'react';\nimport raw from 'raw.macro';\nimport { Button,TextInput, Link , Form, Loading, ToastNotification } from 'carbon-components-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  TableContainer\n} from 'carbon-components-react';\n\n\nfunction SSMMain() {\n  const [gname, setgname] = useState('');\n  const [fname, setfname] = useState('');\n  const [email, setemail] = useState('');\n  const [inviteid, setinviteid] = useState('');\n\n  const [custobj, setCustobj] = useState({});\n  const [subsobj, setSubsobj] = useState({});\n  const [isLoading,setLoading] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n\n  const [notifystatus, setnotifystatus] = useState(false);\n  const [notifystatus2, setnotifystatus2] = useState(false);\n  const [notifystatus3, setnotifystatus3] = useState(false);\n  const [err1status, seterr1status] = useState(false);  \n  const [err2status, seterr2status] = useState(false);\n  const [err3status, seterr3status] = useState(false);\n\n  const [errstate1, seterrstate1] = useState(false); \n  const [errtext1, seterrtext1] = useState('A valid name is required');\n  const [errstate2, seterrstate2] = useState(false); \n  const [errtext2, seterrtext2] = useState('A valid name is required');\n  const [erremstate, seterremstate] = useState(false); \n  const [erremtext, seterremtext] = useState('A valid email is required');\n  const [buttonstate, setbuttonstate] = useState(false);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n        const getSubscrpts = async() => {\n\n        try{\n            if(process.env.REACT_APP_mode === \"dev\"){\n              console.log(\"Mode is : DEV\");\n              let authtoken = raw('./auth.txt');\n              let headers = {\n                  'X-IBM-Client-Id': process.env.REACT_APP_CLIENT_ID,\n                  'X-IBM-Client-Secret': process.env.REACT_APP_CLIENT_SECRET,\n                  'Authorization': authtoken,\n                  'accept': 'application/json',\n              }\n              let response = await fetch(`https://api.ibm.com/scx/sbs_orgaccess/customer?emailAddress=${process.env.REACT_APP_USERNAME}&_namedQuery=getCustomersByContactEmail`,{ headers})\n              let result = await response.json();\n\n              let cust_id = JSON.parse(result[\"List\"][0][\"Id\"]);\n              \n              response = await fetch(`https://api.ibm.com/scx/run/sbs_orgaccess/subscription?_namedQuery=getSubscriptionByCustomer&customerId=${cust_id}`, { headers})\n              result = await response.json();\n\n              setCustobj({...result});\n              setLoading(false);\n\n            }\n\n            else{\n              let response = await fetch('/getmysubscriptions')\n              let result = await response.json();\n\n              setCustobj({...result});\n              setLoading(false);\n            }\n            \n          \n        }\n        catch(error){\n            //alert('Server cannot be reached');\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        getSubscrpts();\n\n  };\n\n    const getSubsHandler = (id) => {\n\n      setLoading(true);\n\n       const getSubs = async() => {\n\n        try{\n\n           if(process.env.REACT_APP_mode === \"dev\"){\n              console.log(\"Mode is : DEV\");\n            let authtoken = raw('./auth.txt');\n            let headers = {\n                'X-IBM-Client-Id': process.env.REACT_APP_CLIENT_ID,\n                'X-IBM-Client-Secret': process.env.REACT_APP_CLIENT_SECRET,\n                'Authorization': authtoken,\n                'accept': 'application/json',\n            }\n\n            let response = await fetch(`https://api.ibm.com/scx/run/sbs_orgaccess/subscriber?subscriptionId=${id}&_namedQuery=getSubscriberListBySubscription`, { headers})\n            let result = await response.json();\n\n            setSubsobj({...result});\n            setLoading(false);\n\n           }\n\n           else{\n\n            let response = await fetch('/getSubscribers?id=' + id);\n            let result = await response.json();\n            \n            setSubsobj({...result});\n            setLoading(false);\n           }\n            \n          }\n        \n        catch(error){\n            //alert('Server cannot be reached');\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        getSubs();\n  }\n\n  const inviteHandler = (id) => {\n    setShowForm(true);\n    setinviteid(id);\n  }\n\n  const handleInviteSubmit = (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    if(gname && fname && email) {\n\n       const inviteUser = async() => {\n\n        try{\n          if(process.env.REACT_APP_mode === \"dev\"){\n                \n            console.log(\"Mode is : DEV\");\n            let authtoken = raw('./auth.txt');\n            let headers = {\n                'X-IBM-Client-Id': process.env.REACT_APP_CLIENT_ID,\n                'X-IBM-Client-Secret': process.env.REACT_APP_CLIENT_SECRET,\n                'Authorization': authtoken,\n                'accept': 'application/json',\n                'content-type': 'application/json'\n            }\n             let reqbody = {\n                \"Subscriber\": {\n                  \"Person\": {\n                    \"GivenName\": gname,\n                    \"EmailAddress\": email,\n                    \"FamilyName\": fname,\n                    \"RoleSet\": [\n                      \"CustomerAdministrator\",\n                      \"AppDeveloper\"\n                    ]\n                  }\n                }\n            };\n\n            let response = await fetch(`https://api.ibm.com/scx/run/sbs_orgaccess/subscriber/inviteUser?subscriptionId=${inviteid}`, { method: \"POST\", body: JSON.stringify(reqbody), headers})\n            let result = await response.json();\n\n            if(result[\"InviteUser\"][\"SuccessMessage\"] === \"User created and entitled in inviter's organization.\"){\n              //alert(\"User Invited\");\n              setnotifystatus(true);\n              setShowForm(false);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n\n            else if(result[\"InviteUser\"][\"SuccessMessage\"] === \"User exists in same organization and entitled with specified subscription.\"){\n              //alert(\"User Invited\");\n              setnotifystatus3(true);\n              setShowForm(false);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n\n            else {\n              //console.log(result);\n              seterr1status(true);\n              setLoading(false);\n            }\n\n          }\n          \n          else{\n\n            let response = await fetch('/inviteuser?givenname=' + gname + '&useremail=' + email + '&familyname=' + fname + '&subspid=' + inviteid)\n            let result = await response.json();\n            \n            console.log(\"Invite res: \", result);\n            \n            if(result[\"InviteUser\"][\"SuccessMessage\"] === \"User created and entitled in inviter's organization.\"){\n              //alert(\"User Invited\");\n              setnotifystatus(true);\n              setShowForm(false);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n\n            else if(result[\"InviteUser\"][\"SuccessMessage\"] === \"User exists in same organization and entitled with specified subscription.\"){\n              //alert(\"User Invited\");\n              setnotifystatus3(true);\n              setShowForm(false);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n\n            else {\n              //console.log(result);\n              seterr1status(true);\n              setLoading(false);\n            }\n\n          }\n        }\n        catch(error){\n            console.log(error);\n            //alert('Server cannot be reached');\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n        inviteUser();\n\n      setgname('');\n      setfname('');\n      setemail('');\n\n     }\n\n     else {\n      //alert('Empty values');\n      seterr3status(true);\n      setLoading(false);\n    }\n  } \n\n\n const revokeHandler = (subid,seatid) => {\n\n     setLoading(true);\n     const revokeSubs = async() => {\n\n        try{\n           if(process.env.REACT_APP_mode === \"dev\"){\n                \n            console.log(\"Mode is : DEV\");\n            let authtoken = raw('./auth.txt');\n            let headers = {\n                'X-IBM-Client-Id': process.env.REACT_APP_CLIENT_ID,\n                'X-IBM-Client-Secret': process.env.REACT_APP_CLIENT_SECRET,\n                'Authorization': authtoken,\n                'accept': 'application/json',\n            }\n\n            let response = await fetch(`https://api.ibm.com/scx/run/sbs_orgaccess/subscriber/${subid}/seat/${seatid}`, { headers, method: \"POST\"})\n            let result = await response;\n\n             if(result[\"status\"] === 204){\n              //alert(\"Subscriber Revoked\");\n              setnotifystatus2(true);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }\n            \n            else {\n              seterr1status(true);\n              setLoading(false);\n            }\n\n           }\n\n           else{\n            let response = await fetch('/revokesubscription?subid=' + subid + '&seatid=' + seatid)\n            let result = await response.json();\n            \n             if(result[\"result\"] === \"success\"){\n              //alert(\"Subscriber Revoked\");\n              setnotifystatus2(true);\n              setTimeout(() => {\n                setSubsobj({});\n              }, 1000);\n              setLoading(false);\n            }            \n            else {\n              seterr1status(true);\n              setLoading(false);\n            }\n          }\n          }\n        \n        catch(error){\n            //alert('Server cannot be reached');\n            seterr2status(true);\n            setLoading(false);\n        }\n\n        }\n      revokeSubs();\n }\n\nconst headers = [\n    {\n    key: 'partnumber',\n    header: 'Part Number',\n  },\n  {\n    key: 'name',\n    header: 'Name',\n  },\n  {\n    key: 'numofseats',\n    header: 'Number of Available Seats',\n  },\n    {\n    key: 'subscrpstate',\n    header: 'Subscription State',\n  },\n  {\n    key: 'action1',\n    header: 'Action',\n  },\n    {\n    key: 'action2',\n    header: '',\n  },\n];\n\nconst headers1 = [\n  {\n    key: 'subid',\n    header: 'Subscriber ID',\n  },\n    {\n    key: 'orgname',\n    header: 'Org Name',\n  },\n  {\n    key: 'givenname',\n    header: 'Given Name',\n  },\n  {\n    key: 'substate',\n    header: 'Subscriber State',\n  },\n  {\n    key: 'revokeaction',\n    header: 'Action',\n  },\n];\n\n function notifystatusf() {\n    setnotifystatus(false);\n  }\n\n  function notifystatusf2() {\n    setnotifystatus2(false);\n  }\n\n  function notifystatusf3() {\n    setnotifystatus3(false);\n  }\n\n  function err1closef() {\n    seterr1status(false);\n  }\n  function err2closef() {\n    seterr2status(false);\n  }\n  function err3closef() {\n    seterr3status(false);\n  }\n\n  const validGname = (e) => {\n\n      if(!e.target.value.match(/^[a-zA-Z]+$/)){\n              seterrstate1(true)\n              seterrtext1(\"Only letters allowed. No special characters or numbers\");\n              setbuttonstate(true)\n           }\n      else{\n            seterrstate1(false)\n            setbuttonstate(false)\n        }        \n            \n      setgname(e.target.value)\n    \n  }\n  const validFname = (e) => {\n\n      if(!e.target.value.match(/^[a-zA-Z]+$/)){\n              seterrstate2(true)\n              seterrtext2(\"Only letters allowed. No special characters or numbers\");\n              setbuttonstate(true)\n           }\n      else{\n            seterrstate2(false)\n            setbuttonstate(false)\n        }        \n            \n      setfname(e.target.value)\n    \n  }\nconst validEmail = (e) => {\n\n      if(!e.target.value.match(/^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$/)){\n              seterremstate(true)\n              seterremtext(\"Valid Email format required\");\n              setbuttonstate(true)\n           }\n      else{\n            seterremstate(false)\n            setbuttonstate(false)\n        }        \n            \n      setemail(e.target.value)\n    \n  }\n\n  return (\n    <>\n    <Form onSubmit={handleSubmit}>\n      <div className=\"ButtonArea\">\n        <Button type=\"submit\" > Get My Subscriptions </Button>\n      </div>\n      \n    </Form>\n\n      <Loading active = {isLoading} description=\"Active loading indicator\" withOverlay={true}/>\n\n  {notifystatus && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Invited user to Subscription</span>}\n        timeout={9000}\n        onClose = {notifystatusf}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n    {notifystatus2 && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Revoked Subscriber</span>}\n        timeout={9000}\n        onClose = {notifystatusf2}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n      {notifystatus3 && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>User exists in same organization and entitled with specified subscription</span>}\n        timeout={5000}\n        onClose = {notifystatusf3}\n        kind = 'success'\n        title=\"Success Notification\"\n      />\n      }\n\n   {err1status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Operation cannot be done</span>}\n        timeout={3000}\n        onClose = {err1closef}\n        title=\"Error Notification\"\n      />\n      }\n\n    {err2status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Server cannot be reached</span>}\n        timeout={3000}\n        onClose = {err2closef}\n        title=\"Error Notification\"\n      />\n      }\n    \n    {err3status && \n    <ToastNotification\n        iconDescription=\"Close notification\"\n        subtitle={<span>Fields cannot be empty</span>}\n        timeout={3000}\n        onClose = {err3closef}\n        title=\"Error Notification\"\n      />\n      }\n\n\n       {custobj.List && \n         <div className = \"TableDisplay\" >\n\n          {custobj.List && \n          \n          <DataTable rows={custobj.List} headers={headers}>\n              {({ rows, headers, getHeaderProps}) => \n            (\n              <TableContainer title=\"Subscription Results\">\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {custobj.List && custobj.List.map((row, index) => {\n                return (\n\n                      <TableRow key={index} >\n\n                        <TableCell>{row.PartNumber}</TableCell>\n                        <TableCell>{row.Name}</TableCell>\n                        <TableCell>{row.NumberOfAvailableSeats}</TableCell>\n                        <TableCell>{row.SubscriptionState}</TableCell>\n                        <TableCell><Link onClick={() => getSubsHandler(row.Id)}>Get Subscribers</Link></TableCell>\n                        <TableCell><Link onClick={() => inviteHandler(row.Id)}>Invite to Subscription</Link></TableCell>\n\n                      </TableRow>\n\n                );\n            })}\n                  </TableBody>\n                </Table>\n                </TableContainer>\n            )\n                }\n          </DataTable>}\n\n        </div>} \n\n         {subsobj.List && \n         <div className = \"TableDisplay\" >\n\n          {subsobj.List && \n          \n          <DataTable rows={subsobj.List} headers={headers1}>\n              {({ rows, headers, getHeaderProps}) => \n            (\n              <TableContainer title=\"Subscriber Results\">\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      {headers.map((header) => (\n                        <TableHeader {...getHeaderProps({ header })}>\n                          {header.header}\n                        </TableHeader>\n                      ))}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {subsobj.List && subsobj.List.map((row, index) => {\n                return (\n\n                      <TableRow key={index} >\n\n                        <TableCell>{row.SeatSet[0].SubscriberId}</TableCell>\n                        <TableCell>{row.Person.OrgName}</TableCell>\n                        <TableCell>{row.Person.GivenName}</TableCell>\n                        <TableCell>{row.SubscriberState}</TableCell>\n                        <TableCell><Link onClick={() => revokeHandler(row.SeatSet[0].SubscriberId,row.SeatSet[0].Id)}>Revoke</Link></TableCell>\n\n                      </TableRow>\n\n                );\n            })}\n                  </TableBody>\n                </Table>\n                </TableContainer>\n            )\n                }\n          </DataTable>}\n\n        </div>} \n\n        {showForm && (\n         <Form onSubmit={handleInviteSubmit} >\n        <div className=\"TextArea\" >\n          <TextInput type = \"text\" id={'gname'}  invalid = {errstate1} invalidText = {errtext1} labelText = {'Given Name*'} placeholder = {'Given Name'} size = 'lg' value={gname} onChange={validGname} /> <br/>\n        </div>\n\n        <div className=\"TextArea\" >\n          <TextInput type = \"text\" id={'fname'}  invalid = {errstate2} invalidText = {errtext2} labelText = {'Family Name*'} placeholder = {'Family Name'} size = 'lg' value={fname} onChange={validFname} /> <br/>\n        </div>\n        \n        <div className=\"TextArea\" >\n          <TextInput type = \"text\" id={'email'}  invalid = {erremstate} invalidText = {erremtext} labelText = {'Email Address*'} placeholder = {'Email address'} size = 'lg' value={email} onChange={validEmail} /> \n        </div>\n        \n        <div className=\"ButtonArea\">\n          <Button type=\"submit\" disabled = {buttonstate}> Invite </Button>\n        </div>\n        </Form>\n      )}\n\n\n    </>\n  );\n};\n\nexport default SSMMain;","import React from 'react'\nimport './App.css';\nimport SSMMain from './components/ssmmain.js';\n\n\n// import { Tabs, Tab, Loading } from 'carbon-components-react';\n\nimport {Header,HeaderName} from \"carbon-components-react/lib/components/UIShell\";\n\n\n//import { HeaderContainer, Modal } from 'carbon-components-react';\n//import {Header} from 'carbon-components-react';\n\nfunction App() {\n  \n  return (\n\n    <>\n    \n      <Header aria-label=\"IBM\">\n        <HeaderName prefix = \"\" href=\"#\">\n          <div Style=\"white-space: nowrap;\">\n            SaaS User Subscription and Management Sample Application\n          </div>\n          </HeaderName>\n        </Header> \n      \n\n    <div className=\"App\">\n     <div className = \"AppContent\">\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n      <h2>Subscription for OrgAccess </h2>     \n            <SSMMain />\n         \n     \n\n    </div>\n    </div>\n\n    </>\n\n    \n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.scss\";\nimport \"./style.scss\";\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}